# Docker Compose specification version
# Schema validation can be enabled locally with: yaml-language-server extension
# Alternative schema: https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

name: whitecodes
x-bake: true

# === Shared Configuration ===
x-common-variables: &common-variables
  NODE_ENV: ${ENV:-development}
  TZ: ${TIMEZONE:-UTC}

x-common-logging: &common-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  system-admin:
    container_name: system-admin
    hostname: system-admin

    # Use init for proper signal handling and zombie process reaping
    init: true

    # Restart policy for production resilience
    restart: unless-stopped

    build:
      context: .
      # Dynamically set the build target stage from the Dockerfile (e.g., dev, test, prod)
      # Set ENV in your .env file. For local development, use ENV=dev
      target: ${ENV:-dev} # Defaults to 'dev' if ENV is not set

      # Build arguments for better caching and configuration
      args:
        NODE_ENV: ${ENV:-development}
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}

      # Labels for image management
      labels:
        - "org.opencontainers.image.title=Admin Service"
        - "org.opencontainers.image.description=Admin microservice with DDD/CQRS architecture"
        - "org.opencontainers.image.version=${VERSION:-1.0.0}"
        - "org.opencontainers.image.created=${BUILD_DATE:-}"
        - "org.opencontainers.image.revision=${VCS_REF:-}"
        - "environment=${ENV:-development}"

    # Resource limits to prevent container resource exhaustion
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

    # Security configurations
    security_opt:
      - no-new-privileges:true
    read_only: false # Set to true if your app doesn't need write access
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

    env_file:
      - ./.env # Load environment variables from .env file

    environment:
      <<: *common-variables
      # Override specific variables for this service
      SERVICE_NAME: "system-admin"
      LOG_LEVEL: ${LOG_LEVEL:-info}

    ports:
      # Map the application port from the container to the host
      - "${SERVER_CONFIGS_PORT:-3000}:${SERVER_CONFIGS_PORT:-3000}"
      # Map the Node.js debug port for remote debugging (development only)
      - "${DEBUG_PORT:-9229}:9229"

    networks:
      - system-admin-private
      - core-postgres-private
      - core-kurrent-private
      - core-mongo-private

    # Service dependencies - ensures other services start first
    # depends_on:
      # Uncomment when these services are available
      # core-postgres:
      #   condition: service_healthy
      # core-kurrent:
      #   condition: service_healthy
      # core-mongo:
      #   condition: service_healthy

    # 'develop' mode enables live-reloading for local development
    # Requires Docker Desktop or running 'docker compose watch'
    develop:
      watch:
        # Sync source code changes into the running container without a rebuild
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - "**/*.test.js"
            - "**/*.spec.js"
        # Rebuild the image if dependencies change
        - action: rebuild
          path: ./package.json
        - action: rebuild
          path: ./package-lock.json
        # Restart container if configuration changes
        - action: rebuild
          path: ./Dockerfile
        - action: restart
          path: ./.env

    # Health check configuration
    healthcheck:
      <<: *common-healthcheck
      test: ["CMD-SHELL", "node -e \"import('node:http').then(({default:http})=>http.get('http://localhost:${SERVER_CONFIGS_PORT:-3000}/api/v1/health',(r)=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1)))\""]

    # Logging configuration
    logging:
      <<: *common-logging

    # Additional labels for service identification
    labels:
      - "traefik.enable=true"
      - "service.group=admin"
      - "service.environment=${ENV:-development}"
      - "service.version=${VERSION:-1.0.0}"

# === Network Configuration ===
networks:
  system-admin-private:
    name: system-admin-private
    external: false
    attachable: true
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "network.group=admin"
      - "network.environment=${ENV:-development}"

  core-postgres-private:
    name: core-postgres-private
    external: false
    attachable: true
    driver: bridge
    labels:
      - "network.group=database"
      - "network.type=postgres"

  core-kurrent-private:
    name: core-kurrent-private
    external: false
    attachable: true
    driver: bridge
    labels:
      - "network.group=messaging"
      - "network.type=kurrent"

  core-mongo-private:
    name: core-mongo-private
    external: false
    attachable: true
    driver: bridge
    labels:
      - "network.group=database"
      - "network.type=mongodb"

# === Volume Configuration ===
# Uncomment and configure if persistent storage is needed
# volumes:
#   admin-logs:
#     driver: local
#     driver_opts:
#       type: none
#       o: bind
#       device: ./logs
#   admin-data:
#     driver: local
